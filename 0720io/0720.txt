**추상 클래스(abstract class)
=>인스턴스를 생성할 수 없는 클래스
=>자바에서 만들 때는 class 앞에 abstract를 붙여서 생성
=>인스턴스를 만들 수 없기 때문에 상속을 통해서만 사용
=>여러 클래스에서 공통으로 사용할 메소드들을 소유하고 있는데 대부분의 경우 메소드를 비어있는 상태로 가지고 있습니다.
=>인터페이스는 메소드를 추상 메소드로 가지고 있습니다.
=>추상 클래스의 메소드는 상속받은 클래스에서 필요한 것만 구현하면 되지만 인터페이스의 메소드는 전부 구현을 해야 합니다.

**Stream
=>JVM 외부에 있는 파일이나 네트워크에 입출력하기 위한 통로
=>단방향성이라서 읽는 스트림과 쓰는 스트림이 구분되어 있습니다.
1.Byte Stream: 바이트 단위로 입출력하는 스트림으로 InputStream 과 OutputStream 이라는 추상 클래스에 공통으로 사용하는 메소드를 선언해 두었습니다.

2.Character Stream: 문자 단위로 입출력하는 스트림으로 Reader 와 Writer 라는 추상 클래스에 공통으로 사용하는 메소드를 선언해 두었습니다.

**ByteStream
=>바이트 단위로 입출력하는 스트림
1.InputStream
=>바이트 단위로 데이터를 읽어오기 위한 스트림
=>메소드
void close(): 스트림의 닫기 위한 메소드

int available(): 읽을 수 있는 바이트 크기를 리턴하는 메소드

int read(): 1 바이트의 데이터를 읽어서 정수로 리턴하는 메소드로 리턴값이 음수이면 읽을 데이터가 없는 것 입니다.

int read(byte [] b): b 배열의 크기만큼을 읽어서 b에 저장하고 읽은 바이트 수를 리턴하는 메소드
이 메소드의 리턴 값이 0보다 작거나 같으면 읽을 데이터가 없는 것입니다.

int read(byte [] b,  int offset, int length): b 배열에 offset 부터 length 만큼 읽어서 저장하는 메소드로 읽은 개수를 리턴합니다.
이 메소드의 리턴 값이 0보다 작거나 같으면 읽을 데이터가 없는 것입니다.

long skip(long n): n 바이트 만큼 스킵

2.OutputStream
=>데이터를 바이트 단위로 출력하기 위한 메소드를 소유한 추상 클래스

void close(): 스트림 닫기

void write(int b): b를 출력
void write(byte [] b): b 배열의 모든 내용을 기록
void write(byte [] b, int offset, int length): b 배열의 offset 부터 length 만큼을 기록

void flush(): 버퍼에 저장된 내용을 기록

3.파일에 바이트 단위로 기록하는 클래스: java.io.FileOutputStream

=>생성자
FileOutputStream(String name): 파일의 경로를 문자열로 대입해서 생성하는데 기록하면 무조건 처음부터 기록합니다.
파일이 없으면 생성합니다.

FileOutputStream(String name, boolean append):
append가 true 이면 파일이 존재하는 경우에 맨 마지막에 추가해서 기록

FileOutputStream(File file): 파일의 경로를 문자열로 주는 대신에 File 인스턴스를 생성해서 대입합니다.

FileOutputStream(File file, boolean append)

4.파일에서 바이트 단위로 읽어오는 클래스
java.io.FileInputStream

=>생성자
FileInputStream(String name): 파일 경로를 문자열로 대입해서 생성

FileInputStream(File file): 파일 경로를 File 인스턴스로 만들어서 대입

=>읽을 때는 반복문을 이용해서 읽어야 하고 읽은 게 없으면 반복문을 종료하도록 만들어 주어야 합니다.

5.입 출력을 할 때 버퍼를 이용하는 이유
=>파일 입출력이나 네트워크 입출력은 운영체제의 자원을 이용하기 때문에 운영체제의 navtive method(운영체제가 사용하는 메소드로 일반적으로 C 언어로 작성되어 있습니다.)를 호출해야 합니다.
=>입출력을 빈번히 수행하게 되면 운영체제와 통신을 많이 하므로 비효율적일 수 있기 때문에 입출력할 내용을 버퍼에 모아서 처리하도록 하면 navtive method 호출의 횟수를 줄일 수 있기 때문에 버퍼를 이용합니다.

6.BufferedInputStream
=>바이트 단위로 버퍼를 이용해서 읽어내는 스트림
=>이 스트림은 다른 스트림을 매개변수로 받아서 생성
BufferedInputStream(InputStream in)

7.PrintStream
=>바이트 단위로 버퍼를 이용해서 기록하는 스트림으로는 BufferedOutputStream 있는데 출력하는 메소드로 print를 사용할 수 있는 PrintStream을 많이 사용합니다.
=>콘솔에 출력하는 System.out 이나 System.err 이 PrintStream 인스턴스 입니다.
=>File 이나 OutputStream 인스턴스를 이용해서 객체를 생성합니다.
=>write 메소드 외에도 print 메소드를 사용할 수 있습니다.
=>print 메소드는 출력하라는 명령이 올 때 까지 출력하지 않고 모아서 출력하고 println은 한 줄의 명령이 올 때 마다 바로 바로 출력합니다.
println은 한 번에 출력해야 하는 내용은 반드시 한 번에 출력해야 합니다.
println은 나누어서 출력하면 이상한 결과를 가져올 수 있습니다.
=>주로 사용하는 클래스는 FileReader, FileWriter, BufferedReader, PrintWriter 클래스 입니다.

1.Reader 클래스
=>문자 단위로 읽기 위한 메소드를 소유한 추상 클래스

char read()
int read(char[] ch)
int read(char[], int offset, int length)

2.Writer
=>문자 단위로 기록하기 위한 메소드를 소유한 추상 클래스
void write(String str)

3.FileWriter
=>문자 단위로 파일에 기록할 수 있는 스트림 클래스
=>생성자
FileWriter(String 파일경로)
FileWriter(String 파일경로, boolean append): append에 true를 대입하면 파일이 있는 경우에는 이어쓰기를 합니다.

FileWriter(File file)
FileWriter(File file, boolean append): append에 true를 대입하면 파일이 있는 경우에는 이어쓰기를 합니다.

4.FileReader
=>파일의 내용을 문자 단위로 읽을 수 있는 스트림
=>생성자
FileReader(String 파일경로)
FileReader(File file)




















